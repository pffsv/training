<?php

	/*
68. Задайте режим строгой типизации (используйте инструкцию declare(strict_types=1);), 
после чего объявите класс A. В нем создайте общедоступный метод, который будет просто 
возвращать свой числовой (!) аргумент. Затем создайте еще один общедоступный статический 
метод, который будет принимать два числовых аргумента, а затем выводить на экран произведение 
вызова первого метода, которому будет передаваться в качестве аргумента первый аргумент данного 
статического метода, на второй аргумент метода. На первый метод сошлитесь при помощи конструкции 
self::. Создайте класс-потомок B, в котором переопределите первый метод таким образом, чтобы он 
возвращал не сам аргумент, а его квадрат. После оформления вызовите из второго класса первый метод. 
Объясните результат. Замените в скрипте конструкцию self:: на static:: и вызовите метод повторно. 
Объясните изменение результата.
	*/

declare(strict_types=1);
 
class A{
    
  public function return_val(int $a){
    return $a;
  }
 
  public static function mult_ab(int $a, int $b){
    echo self::return_val($a)*$b;
    //echo static::return_val($a)*$b;
  }
 
}
  
class B extends A {
    
  public function return_val(int $a){
    return $a*$a;
  }
    
}
  
//Выведет 50, т.к. функция mult_ab использует ссылку self::,  
//которая использует область видимости того класса, в котором 
//она была определена, а не используется
B::mult_ab(5,10); 
             
//Выведет 250, т.к. функция mult_ab использует позднее статическое 
//связывание при помощи ссылки static::, которая использует область 
//видимости класса, в котором она используется, а не определена
//B::mult_ab(5,10);             

?>