<?php 
//89.Абстрактные классы
//Практика
/*Пусть нам необходимо работать с геометрическими фигурами, например, с квадратами, прямоугольниками, треугольниками и так далее.
Пусть каждая фигура будет описываться своим классом, при этом мы хотим сделать так, чтобы каждый класс имел метод для вычисления 
площади и метод для вычисления периметра фигуры.
Давайте сделаем для этого абстрактный класс Figure с двумя абстрактными методами getSquare и getPerimeter.
Почему класс Figure абстрактный: потому что он не описывает реально существующую геометрическую фигуру и, соответственно, 
объект этого класса мы не будем создавать.
Почему методы getSquare и getPerimeter абстрактные: потому что каждая фигура имеет свой алгоритм вычисления площади и периметра и, 
соответственно, класс Figure не может написать реализацию этих методов.
Зачем нам вообще нужен класс Figure: чтобы наследовать от него и таким образом заставить всех наследников реализовать указанные методы.
Итак, напишем реализацию класса Figure:*/

	abstract class Figure
	{
		abstract public function getSquare();
		abstract public function getPerimeter();
	}

//Пусть теперь мы хотим создать класс Quadrate для описания геометрической фигуры квадрат.
//Как известно, у квадрата все стороны равны, поэтому для описания квадрата нам нужно задать только его ширину.
//Давайте для этого сделаем приватное свойство $a, значение которого будет задаваться в конструкторе класса:

	class Quadrate
	{
		private $a;
		
		public function __construct($a)
		{
			$this->a = $a;
		}
	}

//Давайте теперь унаследуем наш класс Quadrate от класса Figure:

	class Quadrate extends Figure
	{
		private $a;
		
		public function __construct($a)
		{
			$this->a = $a;
		}
	}
	
	/*
		Код класса не рабочий
		и будет выдавать ошибку,
		так как мы не написали
		реализацию методов родителя.
	*/

//Сейчас наша реализация класса Quadrate не рабочая, так как мы не написали реализацию абстрактных методов родителя.
//Давайте сделаем это:

	class Quadrate extends Figure
	{
		private $a;
		
		public function __construct($a)
		{
			$this->a = $a;
		}
		
		public function getSquare()
		{
			return $this->a * $this->a;
		}
		
		public function getPerimeter()
		{
			return 4 * $this->a;
		}
	}
//Давайте создадим квадрат со стороной 2 и найдем его площадь и периметр:

	$quadrate = new Quadrate(2);
	echo $quadrate->getSquare(); // выведет 4
	echo $quadrate->getPerimeter(); // выведет 8
	
?>