<?php 
//73.Цепочки методов
//Пусть у нас дан класс Arr, который хранит в себе массив чисел и может вычислять сумму этих чисел с помощью метода getSum.
//Числа могут добавляться по одному с помощью метода add:

	class Arr
	{
		private $numbers = []; // массив чисел
		
		// Добавляем число в массив:
		public function add($number)
		{
			$this->numbers[] = $number;
		}
		
		// Находим сумму чисел:
		public function getSum()
		{
			return array_sum($this->numbers);
		}
	}

//Пример использования класса Arr:

	$arr = new Arr; // создаем объект
	
	$arr->add(1); // добавляем в массив число 1
	$arr->add(2); // добавляем в массив число 2
	$arr->add(3); // добавляем в массив число 3
	
	// Находим сумму элементов массива:
	echo $arr->getSum(); // выведет 6

// теперь мы хотим сделать так, чтобы методы вызывались не отдельно, а цепочкой, вот так:

	$arr = new Arr;
//	echo $arr->add(1)->add(2)->add(3)->getSum(); // так пока не работает, это наша цель

/*Для того, чтобы можно было написать такую цепочку, нужно, чтобы все методы, которые участвуют в цепочке возвращали $this.
Как это будет работать: пусть результатом $arr->add(1) будет $this. Этот $this представляет собой ссылку на наш объект, 
то есть фактически то же самое, что хранится в переменной $arr.
И так будет работать каждый метод цепочки - его результатом будет тот же объект и 
фактически у следующего метода цепочки слева перед -> будет написан сам объект.
То есть такая цепочка:*/

//	echo $arr->add(1)->add(2)->add(3);

//Фактически является такой:


	$arr->add(1); $arr->add(2); $arr->add(3);

/*На самом деле возвращать $this должны не все методы цепочки, а все методы, 
после которых можно написать еще один метод. В нашем случае метод add должен 
возвращать $this, а метод getSum - нет, так мы предполагаем, что этот метод всегда 
будет последним в цепочке и будет возвращать результат, который и выводится на экран через echo.

Итак, давайте поправим наш класс Arr:*/


	class ArrNew
	{
		private $numbers = []; // массив чисел
		
		// Добавляем число в массив:
		public function add($number)
		{
			$this->numbers[] = $number;
			return $this; // вернем ссылку сами на себя
		}
		
		// Находим сумму чисел:
		public function getSum()
		{
			return array_sum($this->numbers);
		}
	}

//Проверим, что все работает:


	$arr = new ArrNew;
	echo $arr->add(1)->add(2)->add(3)->getSum(); // выведет 6

//Можно упростить еще больше:

	echo (new ArrNew)->add(1)->add(2)->add(3)->getSum(); // выведет 6

?>	