
//41.Практика по работе с БД в PHP
Сейчас наша форма выглядит так:

<form action="" method="POST">
	<input name="name" value="<?php if (isset($_POST['name'])) echo $_POST['name']; ?>">
	<input name="age" value="<?php if (isset($_POST['age'])) echo $_POST['age']; ?>">
	<input name="salary" value="<?php 
		if (isset($_POST['salary'])) echo $_POST['salary']; ?>"> 
	<input type="submit" value="добавить работника">
</form>
Ее код достаточно неудобен из-за того, что для добавления нового инпута, нам приходится писать его имя аж в трех местах (тут name="имя", тут isset($_POST['имя']) и тут echo $_POST['имя']).

Мы можем также захотеть сменить имя какого-либо инпута и опять-таки это придется делать в трех местах.

Для того, чтобы поправить проблему, давайте сделаем PHP функцию для генерации инпута (назовем ее input), которая параметром будет принимать имя инпута, а возвращать его HTML код.

Чтобы была понятна цель, которой мы хотим достигнуть, сразу покажу, как мы будем пользоваться нашей функцией input. Давайте сделаем форму, а в ней один инпут с именем age. Сама форма будет представлять собой HTML код, а инпут будет создаваться PHP-шной вставкой:

<form action="" method="POST">
	<?php echo input('age'); ?>
</form>
В результате в браузер отправится следующий HTML со сгенерированным нашей PHP функцией инпутом:

<form action="" method="POST">
	<input name="age">
</form>
Давайте напишем реализацию функции input на PHP, пока без сохранения значения инпута после отправки. В этом случае код будет очень простой:

<?php
/*
	function input($name)
	{
		return '<input name="' . $name . '">';
	}
*/	
?>
Пусть у нас дана вот такая HTML форма:

<form action="" method="POST">
	<input name="name">
	<input name="age">
	<input name="salary">
	<input type="submit" value="добавить работника">
</form>
Давайте перепишем ее с помощью нашей функции input:

<form action="" method="POST">
	<?php echo input('name'); ?>
	<?php echo input('age'); ?>
	<?php echo input('salary'); ?>
	<input type="submit" value="добавить работника">
</form>
Резюмируем: теперь получается, что для создания инпутов мы не пишем HTML код напрямую, а пишем PHP код, который результатом своей работы выдаст нужный нам HTML.

Зачем мы это делаем: затем, что в данном случае PHP код для инпута проще и нет не нужного нам дублирования имени инпута в трех местах.

Итак, думаю, основная идея введения таких функций вам понятна.

Давайте теперь допишем нашу функцию так, чтобы она сохраняла значение инпута после отправки.

Для этого в атрибут value генерируемого инпута будем подставлять данные из массива $_POST.

При этом для инпута с именем age мы подставим значение из $_POST['age'], для инпута с именем name - $_POST['name'] и так далее.

Так как у нас одна функция создает инпуты с разными именами и имя инпута хранится в переменной $name, то получится что value каждого инпута хранится в $_POST[$name].

То есть получим следующую функцию:

<?php
/*
	function input($name)
	{
		$value = $_POST[$name];
		return '<input name="' . $name . '" value="' . $value .'">';
	}
*/	
?>
Наша функция, однако, не идеальна - ведь форма может быть еще не отправлена и $_POST будет пустой.

Поправим проблему, добавив условие if:

<?php
/*
	function input($name)
	{
		if (isset($_POST[$name])) {
			$value = $_POST[$name];
		} else {
			$value = '';
		}
		
		return '<input name="' . $name . '" value="' . $value .'">';
	}
*/	
?>
Теперь наша функция работает так, как надо.

Давайте соберем вместе HTML форму и PHP код для вставки работника в базу данных:

<?php
	function input($name)
	{
		if (isset($_POST[$name])) {
			$value = $_POST[$name];
		} else {
			$value = '';
		}
		
		return '<input name="' . $name . '" value="' . $value .'">';
	}

	if (!empty($_POST)) {
		$name = $_POST['name'];
		$age = $_POST['age'];
		$salary = $_POST['salary'];
		
		$query = "INSERT INTO workers SET name='$name', age='$age', salary='$salary'";
		mysqli_query($link, $query) or die(mysqli_error($link));
	}
?>
<form action="" method="POST">
	<?php echo input('name'); ?>
	<?php echo input('age'); ?>
	<?php echo input('salary'); ?>
	<input type="submit" value="добавить работника">
</form>
Если вы запустите этот код и нажмете на кнопку - форма отправится, работник добавится в БД, но введенные данные из инпутов не исчезнут.

Если нажать на кнопку второй раз - в базу добавится такая же запись.

Можно также подредактировать в инпуте, к примеру, фамилию работника, оставив остальное без изменения и опять нажать на кнопку сохранения. В этом случае добавится второй работник с такими же данными, но с другой фамилией.

То есть удобство тут в том, что при массовой вставке те данные, которые не изменяются - можно не вбивать повторно.

Кроме того, то, что инпуты не очищаются сами - удобно для контроля вбитых нами данных после отправки формы.