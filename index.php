<?php
//24.Работа с регулярными выражениями на PHP.
//Функция preg_replace.

/*
    str_replace(что меняем, на что меняем, где меняем)
	preg_replace(что меняем, на что меняем, где меняем)
*/	

	echo str_replace('a', '!', 'aabbaa').'<br>'; //выведет '!!bb!!'
	echo preg_replace('#a#', '!', 'aabbaa').'<br>'; //выведет '!!bb!!'

	echo preg_replace('#A#', '!', 'aAb').'<br>'; //выведет 'a!b'
	echo preg_replace('#A#i', '!', 'aAb').'<br>'; //выведет '!!b'

	//Во втором случае игнорируется регистр символов.

//Буквы, цифры, любой символ
	//Буквы и цифры обозначают сами себя, а вот точка является специальным символом и обозначает 'любой символ'.	

	echo preg_replace('#xax#', '!', 'xax xaax').'<br>'; //выведет '! xaax'
	echo preg_replace('#123#', '!', '123 xaax').'<br>'; //выведет '! xaax'
	echo preg_replace('#x3x#', '!', 'x3x xaax').'<br>'; //выведет '! xaax'

	//Обратите внимание на то, что регистр имеет значение:
	echo preg_replace('#A3B#', '!', 'a3b A3B').'<br>'; //выведет 'a3b !'

	echo preg_replace('#x.x#', '!', 'xax xsx x&x x-x xaax').'<br>'; //выведет '! ! ! ! xaax'
	echo preg_replace('#x..x#', '!', 'xax xabx').'<br>'; //выведет 'xax !'

	//буквы и цифры обозначают сами себя, а точка заменяет любой символ кроме перевода строки.

//Операторы повторения символов (*,+,?)	
/*Oператоры (квантификаторы) повторения: 
'+' (один и более раз), 
'*' (ноль и более раз) и 
'?' (ноль или один раз, иначе говоря - может быть, а может не быть).
Данные операторы действуют на тот символ, который стоит перед ними.*/

	echo preg_replace('#xa+x#', '!', 'xx xax xaax xaaax xbx').'<br>'; //выведет 'xx ! ! ! xbx'
	//В данном случае шаблон поиска выглядит так: буква 'x', буква 'a' один или более раз, буква 'x'.

	echo preg_replace('#xa*x#', '!', 'xx xax xaax xaaax xbx').'<br>'; //выведет '! ! ! ! xbx'
	//буква 'x', буква 'a' ноль или более раз, буква 'x'. По-другому можно сказать так: буквы 'a' или нет, или повторяется один или более раз.

	echo preg_replace('#xa?x#', '!', 'xx xax xaax xbx').'<br>'; //выведет '! ! xaax xbx'
	//буква 'x', далее буква 'a' может быть или не быть, потом буква 'x'.

//Группирующие скобки

	echo preg_replace('#x(ab)+x#', '!', 'xabx xababx xaabbx').'<br>'; //выведет '! ! xaabbx'
	//буква 'x', далее строка 'ab' один или более раз, потом буква 'x'.
	//То есть: если что-то стоит в группирующих скобках и сразу после ')' стоит оператор повторения - он подействует на все, что стоит внутри скобок.

//Экранировка спецсимволов	

	echo preg_replace('#a\+x#', '!', 'a+x ax aax aaax').'<br>'; //выведет 'a+x ! ! !'
	//буква 'a', затем плюс '+', затем буква 'x'.

	echo preg_replace('#a\.x#', '!', 'a.x abx azx').'<br>'; //выведет '! abx azx'
	//буква 'a', затем точка '.', затем буква 'x'.

//Ограничители
//В качестве ограничителей могут выступать не только #, но и любые другие символы 

	echo preg_replace('&a+&', '!', 'строка').'<br>'; //ограничители - амперсанды

	echo preg_replace('(a+)', '!', 'строка').'<br>'; //ограничители - скобки

	//Ограничители - решетки, амперсанд не экранируем:
	echo preg_replace('#a&b#', '!', 'a&b').'<br>'; //выведет '!'

	/*
		Ограничители - амперсанды, 
		и теперь амперсанд внутри приходится экранировать,
		иначе это вызовет ошибку PHP:
	*/
	echo preg_replace('&a\&b&', '!', 'a&b').'<br>'; //выведет '!'	

//Ограничение жадности

	//Выведет '! e', а ожидалось '! qw x e':
	echo preg_replace('#a.+x#', '!', 'a23e4x qw x e').'<br>';  
    /*
    В данном примере шаблон поиска выглядит так: буква 'a', 
    затем любой символ один или более раз, затем буква 'x'.
    Однако, регулярка сработала не так, как ожидал автор - 
    она захватила максимально возможное количество символов, 
    то есть закончилась не на первом иксе 'x', а на последнем 'x'.
    */

    echo preg_replace('#a.+?x#', '!', 'a23e4x qw x e'); //выведет '! qw x e'
    /*
    В данном примере шаблон поиска выглядит так: буква 'a', 
    затем любой символ один или более раз (с ограничением жадности), затем буква 'x'.
    С помощью '?' мы ограничили жадность плюсу - и теперь он ищет до первого совпадения.
    */

    //Жадность можно ограничивать всем операторам повторения, в том числе и '?', и '{}' - вот так: '??' и '{}?'.
?>

	




