<?php 
//77.Перезапись методов родителя в классе потомке
class User
	{
		private $name;
		protected $age; // изменим модификатор доступа на protected
		
		public function getName()
		{
			return $this->name;
		}
		
		public function setName($name)
		{
			$this->name = $name;
		}
		
		public function getAge()
		{
			return $this->age;
		}
		
		public function setAge($age)
		{
			if ($age >= 18) {
				$this->age = $age;
			}
		}
	}

//Работа с parent
/*Сейчас в нашем новом методе setAge мы выполняем проверку того, что возраст от 18 до 25 лет.
Однако, проверку, того, что возраст от 18 лет выполняет и метод setAge.
Это значит, что если мы захотим изменить нижнюю границу возраста - 
нам придется сделать это в двух местах: в коде класса родителя и в коде класса потомка.
Было бы удобно, если мы метод setAge потомка мог использовать метод setAge от родителя, 
ведь в методе родителя расположена часть кода, которая нам подходит и мы не хотим ее дублировать в методе потомка.
Такое можно сделать с помощью ключевого слова parent, указывающего на родителя.
С его помощью к переопределенному методу родителя можно обратиться так: parent::setAge(), то есть ключевое слово parent, затем два двоеточия и сам метод.
Давайте доработаем наш класс Student так, чтобы использовался метод setAge родителя:*/

	class Student extends User
	{
		private $course;
		
		public function setAge($age)
		{
			// Если возраст меньше или равен 25:
			if ($age <= 25) {
				// Вызываем метод родителя:
				parent::setAge($age); // в родителе выполняется проверка age >= 18
			}
		}
		
		public function getCourse()
		{
			return $this->course;
		}
		
		public function setCourse($course)
		{
			$this->course = $course;
		}
	}

/*Отлично, мы добились того, что хотели. Более того, теперь метод setAge 
потомка не использует свойство age напрямую - в классе-родителе можно 
поменять его модификатор доступа с protected обратно на private.*/
?>