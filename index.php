<?php
//27.Работа с регулярными выражениями на PHP
//Фигурные скобки
/*
Oператор {}, указывающий количество повторений.
Работает он следующим образом: {5} – пять повторений, 
{2,5} – повторяется от двух до пяти (оба включительно), 
{2,} - повторяется два и более раз. Обратите внимание на то, что такого варианта - {,2} - нет. 
*/

	echo preg_replace('#xa{1,2}x#', '!', 'xx xax xaax xaaax').'<br>'; //выведет 'xx ! ! xaaax'
	//В данном случае шаблон поиска выглядит так: буква 'x', буква 'a' один или два раза, буква 'x'.

	echo preg_replace('#xa{2,}x#', '!', 'xx xax xaax xaaax').'<br>'; //выведет 'xx xax ! !'
	//В данном случае шаблон поиска выглядит так: буква 'x', буква 'a' два раза и более, буква 'x'.

	echo preg_replace('#xa{2}x#', '!', 'xx xax xaax xaaax').'<br>'; //выведет 'xx xax ! xaaax'
	//В данном случае шаблон поиска выглядит так: буква 'x', буква 'a' два раза, буква 'x'.

//Группы символов \s, \S, \w, \W, \d, \D

	echo preg_replace('#\d+#', '!', '1 12 123 abc @@@').'<br>'; //выведет '! ! ! abc @@@'	
	/*	В данном примере шаблон поиска выглядит так: цифра от 0 до 9 один или более раз.
    Обратите внимание на то, что оператор + считает данные команды одним целым 
    (группирующие скобки не нужны). Это относится ко всем операторам повторения. */

    echo preg_replace('#\s#', '!', '1 12 123 abc @@@').'<br>'; //выведет '1!12!123!abc!@@@'
    //пробельный символ один раз.

    echo preg_replace('#\S+#', '!', '1 12 123 abc @@@').'<br>'; //выведет '! ! ! ! !'
    //НЕ пробельный символ один или более раз. Все подстроки, разделенные пробелами, заменятся на '!'.

    echo preg_replace('#\w+#', '!', '1 12 123a Abc @@@').'<br>'; //выведет '! ! ! ! @@@'
    //цифра или буква один или более раз. Все подстроки, состоящие из цифр и букв, заменятся на '!'.

    echo preg_replace('#\W+#', '!', '1 12 123 Abc @@@').'<br>'; //выведет '1!12!123!Abc!'
    /*НЕ цифра и НЕ буква один или более раз. Под данное определение в нашем случае попадает 
    '@@@' и все пробелы (они ведь тоже не цифры и не буквы!). Обратите внимание на то, что в конце один 
    '!' - в него преобразовалась строка ' @@@' - с пробелом впереди.*/

// Квадратные скобки '[' и ']' 
//'[' и ']'- представляют собой операцию 'или':  

    echo preg_replace('#[abc]xx#', '!', 'axx bxx cxx exx').'<br>'; //выведет '! ! ! exx'
    //первый символ - это буква 'a', 'b' или 'c', потом две буквы 'x'.

//'^' - мы можем сделать отрицание:

    echo preg_replace('#[^abc]xx#', '!', 'axx bxx cxx exx').'<br>'; //выведет 'axx bxx cxx !'
    //первый символ - это НЕ буква 'a', 'b' или 'c' (любой символ кроме них), потом две буквы 'x'.

    echo preg_replace('#[^d]xx#', '!', 'axx bxx ^xx dxx').'<br>'; //выведет '! ! ! dxx'
    //первый символ - это все кроме 'd', потом две буквы 'x'.

    echo preg_replace('#[\^d]xx#', '!', 'axx bxx ^xx dxx').'<br>'; //выведет 'axx bxx ! !'
    //первый символ - это 'd' или '^', потом две буквы 'x'.

    echo preg_replace('#[a-zA-Z-]xx#', '!', 'axx Axx -xx @xx').'<br>'; //выведет '! ! ! @xx'
    //первый символ - это маленькие, большие буквы или дефис '-', потом две буквы 'x'.

    echo preg_replace('#[\da-z]xx#', '!', '3xx axx Axx').'<br>'; //выведет '! ! Axx'
    //первый символ - это цифра от 0 до 9 (\d) или маленькая латинская буква (a-z), потом две буквы 'x'.

    echo preg_replace('#[.a]+xx#', '!', '.xx ..xx .a.xx bxx').'<br>'; //выведет '! ! ! bxx'
    //точка или буква 'a' один или более раз, потом две буквы 'x'.

//Особенности кириллицы 
//Первое: кириллица не входит в \w, нужно делать так: [а-яА-Я].
//Второе: так сделать недостаточно [а-яА-Я] - сюда не войдет буква ё, нужно делать так: [а-яА-ЯЁё].
//Если нужны только маленькие буквы - тогда просто [а-яё].
//Третье: PHP не любитель работать с кириллицей, поэтому, чтобы все работало корректно - нужно ставить модификатор 'u' (именно маленькая буква):

    echo preg_replace('#[а-яА-ЯЁё]яя#u', '!', 'аяя ёяя 2яя').'<br>'; //выведет '! ! 2яя'
    //первый символ - это цифра кириллическая буква, потом две буквы 'я'.

//Начало '^' и конец '$' строки

    echo preg_replace('#^aaa#', '!', 'aaa aaa aaa').'<br>'; //выведет '! aaa aaa'
    // заменить 'aaa' на '!' только если оно стоит в начале строки.

    echo preg_replace('#aaa$#', '!', 'aaa aaa aaa').'<br>'; //выведет 'aaa aaa !'
    //заменить 'aaa' на '!' только если оно стоит в конце строки.

    echo preg_replace('#^a+$#', '!', 'aaa').'<br>'; //выведет '!'
    //буква 'a' повторяется один или более раз, заменить всю строку на '!' только она состоит из одних букв 'a'.
    // когда в начале регулярки стоит '^', а в конце - '$'. Таким образом мы проверяем всю строку целиком на соответствие регулярке.

//'Или' через вертикальную черту |   

	echo preg_replace('#a|b+|c#', '!', 'bbbb').'<br>'; //выведет '!'
	/*если вся строка - это 'a', или вся строка - один или более букв 'b', 
	или вся строка - это 'c', то заменить ее на '!'.

    В данном случае 'или' действует на все регулярное выражение (по сути у нас три регулярки в одной). 
    Можно работать и по-другому - поставим круглые скобки, и теперь '|' будет действовать только внутри них: */

    echo preg_replace('#(a|b+)xx#', '!', 'axx bxx bbxx exx').'<br>'; //выведет '! ! ! exx'
    //в начале стоит или 'a', или 'b' один или более раз, а потом две буквы 'x'.

//Конец или начало слова \b, \B 
//\b обозначает начало или конец слова, а \B, соответственно, - не начало и не конец слова. 

	echo preg_replace('#\b[a-z]+\b#', '!', 'axx bxx xxx exx').'<br>'; //выведет '! ! ! !'  
	//начало слова, маленькие латинские один или более раз, конец слова. Таким образом, регулярка найдет все слова и заменит их на '!'.

	echo preg_replace('#\S+#', '!', 'axx bxx xxx exx').'<br>'; //выведет '! ! ! !'
	//один или более НЕ пробелов заменить на '!'. Но иногда все же без \b не обойтись.

//Проблема обратного слеша	

	echo preg_replace('#\\\\#', '!', '\\ \\ \\\\').'<br>'; //выведет '! ! !!'
	/*обратный слеш один раз.
    Обратите внимание на '\\ \\ \\\\' - мы удваиваем все слеши для PHP, 
    и в реальности строка выглядит так: '\ \ \\', поэтому в ответе будет '! ! !!', а не '!! !! !!!!'.*/

    echo preg_replace('#\\\\+#', '!', '\\ \\ \\\\').'<br>'; //выведет '! ! !'
    //Шаблон поиска такой: обратный слеш один или более раз.

//Количество замен в preg_replace   

	echo preg_replace('#a+#', '!', 'a aa aaa aaaa', 2).'<br>'; //выведет '! ! aaa aaaa'
	//Функция произвела только две замены, все остальное не заменилось ('aaa' и 'aaaa' попали под регулярку но не поменялись на '!'). 

	echo preg_replace('#a+#', '!', 'a aa aaa aaaa', 3).'<br>'; //выведет '! ! ! aaaa'
	//теперь 3 замены.

?>

	




