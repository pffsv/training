<?php 
//106.Магические методы
/*Методы PHP, начинающиеся с двойного подчеркивания __, называются магическим. 
Магия таких методов состоит в том, что они могут вызываться при совершении какого-то действия автоматически.
Один из магических методов - __construct - уже вам знаком.
Есть также магические методы-перехватчики __get, __set, __isset, __unset, __call. 
Они называются перехватчиками, так как перехватывают обращение к недоступным или несуществующим членам класса.
В следующих уроках мы подробнее поговорим про каждый из магических методов.*/

//107.Магический метод __toString
/*Первый магический метод, который мы с вами изучим, называется __toString, который вызывается при попытке приведения экземпляра класса к строке.
Понятие приведение к строке лучше разберем на практическом примере.
Пусть у нас дан вот такой класс User:*/

	class User
	{
		private $name;
		private $age;
		
		public function __construct($name, $age)
		{
			$this->name = $name;
			$this->age = $age;
		}
		
		public function getName()
		{
			return $this->name;
		}
		
		public function getAge()
		{
			return $this->age;
		}
	}

//Давайте создадим объект этого класса:

	$user = new User('Коля', 25); // создаем объект класса

//А теперь попытаемся вывести созданный объект через echo:

	$user = new User('Коля', 25);
	echo $user; // пытаемся вывести объект через echo

/*Попытка сделать вывод объекта через echo и есть преобразование к строке. 
В данном случае PHP выдаст ошибку, так как просто так объекты в строку не преобразуются.
Для того, чтобы убрать ошибку, мы должны в явном виде сказать PHP, 
что делать при попытке преобразовать объект в строку. Для этого и существует магический метод __toString.
Если в коде нашего класса сделать такой метод, то результат этого метода (то есть то, что он вернет через return) и будет строковым представлением объекта.
Пусть мы хотим, чтобы при попытке вывести объект через echo, выводилось имя юзера. Значит сделаем метод __toString и вернем в нем значение свойства name:*/

	class User
	{
		private $name;
		private $age;
		
		public function __construct($name, $age)
		{
			$this->name = $name;
			$this->age = $age;
		}
		
		// Реализуем указанный метод:
		public function __toString()
		{
			return $this->name;
		}
		
		public function getName()
		{
			return $this->name;
		}
		
		public function getAge()
		{
			return $this->age;
		}
	}

//Проверим:

	$user = new User('Коля', 25);
	echo $user; // выведет 'Коля' - все работает!

?>	